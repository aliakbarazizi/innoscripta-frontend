/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ArticleImport } from './routes/_article'
import { Route as ArticleIndexImport } from './routes/_article/index'
import { Route as ArticleFeedImport } from './routes/_article/feed'

// Create/Update Routes

const ArticleRoute = ArticleImport.update({
  id: '/_article',
  getParentRoute: () => rootRoute,
} as any)

const ArticleIndexRoute = ArticleIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ArticleRoute,
} as any)

const ArticleFeedRoute = ArticleFeedImport.update({
  id: '/feed',
  path: '/feed',
  getParentRoute: () => ArticleRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_article': {
      id: '/_article'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ArticleImport
      parentRoute: typeof rootRoute
    }
    '/_article/feed': {
      id: '/_article/feed'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof ArticleFeedImport
      parentRoute: typeof ArticleImport
    }
    '/_article/': {
      id: '/_article/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ArticleIndexImport
      parentRoute: typeof ArticleImport
    }
  }
}

// Create and export the route tree

interface ArticleRouteChildren {
  ArticleFeedRoute: typeof ArticleFeedRoute
  ArticleIndexRoute: typeof ArticleIndexRoute
}

const ArticleRouteChildren: ArticleRouteChildren = {
  ArticleFeedRoute: ArticleFeedRoute,
  ArticleIndexRoute: ArticleIndexRoute,
}

const ArticleRouteWithChildren =
  ArticleRoute._addFileChildren(ArticleRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof ArticleRouteWithChildren
  '/feed': typeof ArticleFeedRoute
  '/': typeof ArticleIndexRoute
}

export interface FileRoutesByTo {
  '/feed': typeof ArticleFeedRoute
  '/': typeof ArticleIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_article': typeof ArticleRouteWithChildren
  '/_article/feed': typeof ArticleFeedRoute
  '/_article/': typeof ArticleIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/feed' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/feed' | '/'
  id: '__root__' | '/_article' | '/_article/feed' | '/_article/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ArticleRoute: typeof ArticleRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ArticleRoute: ArticleRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_article"
      ]
    },
    "/_article": {
      "filePath": "_article.tsx",
      "children": [
        "/_article/feed",
        "/_article/"
      ]
    },
    "/_article/feed": {
      "filePath": "_article/feed.tsx",
      "parent": "/_article"
    },
    "/_article/": {
      "filePath": "_article/index.tsx",
      "parent": "/_article"
    }
  }
}
ROUTE_MANIFEST_END */
